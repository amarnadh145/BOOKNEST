package SLibrary;

import java.sql.ResultSetMetaData;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Vector;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author DAKSHAYANI
 */
public class Author extends javax.swing.JFrame {

    /**
     * Creates new form Category
     */
    public Author() {
        initComponents();
        Connect(); 
        Author_load();
    }
    
    Connection con;
    PreparedStatement pst;
    ResultSet rs;
    
    // Variable to track selected author ID
    private int selectedId = -1;
    
    public void Connect() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver"); // Updated driver for MySQL 8+
            con = DriverManager.getConnection("jdbc:mysql://sql5.freesqldatabase.com:3306/sql5777721", "sql5777721", "VSiGHrR7hT");
            System.out.println("Connected to database.");
        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(this, "Database connection failed: " + e.getMessage());
        }
    }
    
    public void Author_load() {
        try {
            pst = con.prepareStatement("SELECT * FROM author");
            rs = pst.executeQuery();
            
            DefaultTableModel d = (DefaultTableModel) jTable1.getModel();
            d.setRowCount(0); // clear existing rows
    
            while (rs.next()) {
                Vector<String> v2 = new Vector<>();
                // Don't include the ID field
                v2.add(rs.getString("name"));
                v2.add(rs.getString("address"));
                v2.add(rs.getString("phone"));
                d.addRow(v2);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Author.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void clearFields() {
        txtauthorname.setText("");
        txtaddress.setText("");
        txtphone.setText("");
        txtauthorname.requestFocus();
    }
    
    private void author_load() {
        try {
            pst = con.prepareStatement("SELECT * FROM author");
            rs = pst.executeQuery();
            ResultSetMetaData rsd = rs.getMetaData();
            int c = rsd.getColumnCount();
            
            DefaultTableModel d = (DefaultTableModel) jTable1.getModel();
            d.setRowCount(0);
            
            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 1; i <= c; i++) {
                    v2.add(rs.getString("id"));
                    v2.add(rs.getString("name"));
                    v2.add(rs.getString("address"));
                    v2.add(rs.getString("phone"));
                }
                d.addRow(v2);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Author.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error loading authors: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        // Initialize components
        txtauthorname = new JTextField();
        txtaddress = new JTextArea(5, 20);
        txtphone = new JTextField();
        jButton1 = new JButton();
        jButton2 = new JButton();
        jButton3 = new JButton();
        jButton4 = new JButton();
        
        // CHANGED: Remove ID column from table model
        jTable1 = new JTable(new DefaultTableModel(
            new Object [][] {},
            new String [] { "Author Name", "Address", "Phone" }
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });
        
        jScrollPane1 = new JScrollPane(jTable1);
        jScrollPane2 = new JScrollPane(txtaddress);

        // Main background panel
        JPanel backgroundPanel = new JPanel(new GridBagLayout());
        backgroundPanel.setBackground(new Color(236, 240, 241));

        // Main form panel (rounded corners, green background)
        Color mainGreen = new Color(0, 102, 102);
        JPanel formPanel = new RoundedPanel(30, mainGreen);
        formPanel.setLayout(new GridBagLayout());
        formPanel.setPreferredSize(new Dimension(1300, 540));
        formPanel.setBackground(mainGreen);

        // Title above 'AUTHOR'
        JLabel bigTitle = new JLabel("BOOKNEST");
        bigTitle.setFont(new Font("SansSerif", Font.BOLD, 22));
        bigTitle.setForeground(Color.WHITE);
        bigTitle.setHorizontalAlignment(SwingConstants.CENTER);

        // 'AUTHOR' label, centered
        JLabel authorLabel = new JLabel("AUTHOR");
        authorLabel.setFont(new Font("SansSerif", Font.BOLD, 20));
        authorLabel.setForeground(Color.WHITE);
        authorLabel.setHorizontalAlignment(SwingConstants.CENTER);

        // Labels
        JLabel nameLabel = new JLabel("NAME");
        nameLabel.setFont(new Font("SansSerif", Font.BOLD, 16));
        nameLabel.setForeground(Color.WHITE);
        JLabel addressLabel = new JLabel("ADDRESS");
        addressLabel.setFont(new Font("SansSerif", Font.BOLD, 16));
        addressLabel.setForeground(Color.WHITE);
        JLabel phoneLabel = new JLabel("PHONE");
        phoneLabel.setFont(new Font("SansSerif", Font.BOLD, 16));
        phoneLabel.setForeground(Color.WHITE);

        // Fields (keep original sizes, but set preferred size for better appearance)
        Dimension fieldSize = new Dimension(280, 36);
        txtauthorname.setPreferredSize(fieldSize);
        txtphone.setPreferredSize(fieldSize);
        txtauthorname.setFont(new Font("SansSerif", Font.PLAIN, 16));
        txtauthorname.setBackground(Color.WHITE);
        txtauthorname.setForeground(mainGreen);
        txtauthorname.setCaretColor(mainGreen);
        txtauthorname.setBorder(BorderFactory.createLineBorder(Color.WHITE, 1));
        
        txtphone.setFont(new Font("SansSerif", Font.PLAIN, 16));
        txtphone.setBackground(Color.WHITE);
        txtphone.setForeground(mainGreen);
        txtphone.setCaretColor(mainGreen);
        txtphone.setBorder(BorderFactory.createLineBorder(Color.WHITE, 1));
        
        txtaddress.setLineWrap(true);
        txtaddress.setWrapStyleWord(true);
        txtaddress.setFont(new Font("SansSerif", Font.PLAIN, 16));
        txtaddress.setBackground(Color.WHITE);
        txtaddress.setForeground(mainGreen);
        txtaddress.setCaretColor(mainGreen);
        txtaddress.setBorder(BorderFactory.createLineBorder(Color.WHITE, 1));
        jScrollPane2.setPreferredSize(new Dimension(280, 80));

        // Buttons
        JButton addBtn = jButton1;
        addBtn.setText("ADD");
        addBtn.setBackground(new Color(0, 153, 102));
        addBtn.setForeground(Color.WHITE);
        addBtn.setFocusPainted(false);
        addBtn.setFont(new Font("SansSerif", Font.BOLD, 16));
        addBtn.setBorder(BorderFactory.createEmptyBorder(8, 0, 8, 0));
        JButton updateBtn = jButton2;
        updateBtn.setText("UPDATE");
        updateBtn.setBackground(Color.WHITE);
        updateBtn.setForeground(new Color(0, 153, 102));
        updateBtn.setFocusPainted(false);
        updateBtn.setFont(new Font("SansSerif", Font.BOLD, 16));
        updateBtn.setBorder(BorderFactory.createEmptyBorder(8, 0, 8, 0));
        JButton deleteBtn = jButton3;
        deleteBtn.setText("DELETE");
        deleteBtn.setBackground(new Color(220, 53, 69)); // red
        deleteBtn.setForeground(Color.WHITE);
        deleteBtn.setFocusPainted(false);
        deleteBtn.setFont(new Font("SansSerif", Font.BOLD, 16));
        deleteBtn.setBorder(BorderFactory.createEmptyBorder(8, 0, 8, 0));
        JButton cancelBtn = jButton4;
        cancelBtn.setText("CANCEL");
        cancelBtn.setBackground(Color.WHITE);
        cancelBtn.setForeground(new Color(0, 153, 102));
        cancelBtn.setFocusPainted(false);
        cancelBtn.setFont(new Font("SansSerif", Font.BOLD, 16));
        cancelBtn.setBorder(BorderFactory.createEmptyBorder(8, 0, 8, 0));

        // Table
        jTable1.setFont(new Font("SansSerif", Font.PLAIN, 15));
        jTable1.setRowHeight(28);
        jTable1.getTableHeader().setFont(new Font("SansSerif", Font.BOLD, 15));
        jTable1.getTableHeader().setBackground(new Color(0, 102, 102));
        jTable1.getTableHeader().setForeground(Color.WHITE);
        // Center table text
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            jTable1.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        jScrollPane1.setPreferredSize(new Dimension(800, 420));
        jScrollPane1.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));

        // Table column widths
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

        // Buttons in a single row, centered
        JPanel btnRow = new JPanel(new GridLayout(1, 4, 18, 0));
        btnRow.setOpaque(false);
        btnRow.add(addBtn);
        btnRow.add(updateBtn);
        btnRow.add(deleteBtn);
        btnRow.add(cancelBtn);

        // Layout for form fields/buttons (left half)
        JPanel leftPanel = new JPanel();
        leftPanel.setOpaque(false);
        leftPanel.setLayout(new GridBagLayout());
        GridBagConstraints lgbc = new GridBagConstraints();
        lgbc.insets = new Insets(10, 10, 10, 10);
        lgbc.gridx = 0; lgbc.gridy = 0; lgbc.gridwidth = 2;
        lgbc.fill = GridBagConstraints.HORIZONTAL;
        leftPanel.add(bigTitle, lgbc);
        lgbc.gridy++;
        leftPanel.add(authorLabel, lgbc);
        lgbc.gridy++;
        lgbc.gridwidth = 1;
        lgbc.anchor = GridBagConstraints.WEST;
        leftPanel.add(nameLabel, lgbc);
        lgbc.gridx = 1; lgbc.anchor = GridBagConstraints.EAST;
        leftPanel.add(txtauthorname, lgbc);
        lgbc.gridx = 0; lgbc.gridy++; lgbc.anchor = GridBagConstraints.WEST;
        leftPanel.add(addressLabel, lgbc);
        lgbc.gridx = 1; lgbc.anchor = GridBagConstraints.EAST;
        leftPanel.add(jScrollPane2, lgbc);
        lgbc.gridx = 0; lgbc.gridy++; lgbc.anchor = GridBagConstraints.WEST;
        leftPanel.add(phoneLabel, lgbc);
        lgbc.gridx = 1; lgbc.anchor = GridBagConstraints.EAST;
        leftPanel.add(txtphone, lgbc);
        lgbc.gridx = 0; lgbc.gridy++; lgbc.gridwidth = 2;
        lgbc.anchor = GridBagConstraints.CENTER;
        leftPanel.add(Box.createVerticalStrut(18), lgbc); // vertical space before buttons
        lgbc.gridy++;
        leftPanel.add(btnRow, lgbc);

        // Main formPanel layout: left (form), right (table)
        GridBagConstraints fgbc = new GridBagConstraints();
        fgbc.insets = new Insets(20, 20, 20, 20);
        fgbc.gridx = 0; fgbc.gridy = 0;
        fgbc.anchor = GridBagConstraints.NORTHWEST;
        fgbc.weightx = 0.5; fgbc.weighty = 1.0;
        fgbc.fill = GridBagConstraints.BOTH;
        formPanel.add(leftPanel, fgbc);
        fgbc.gridx = 1;
        fgbc.weightx = 0.5;
        formPanel.add(jScrollPane1, fgbc);

        // Add formPanel to backgroundPanel
        backgroundPanel.add(formPanel);
        setContentPane(backgroundPanel);
        setTitle("Author");
        setResizable(false);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new Dimension(1400, 700));
        pack();
        setLocationRelativeTo(null);

        // Event handlers
        txtauthorname.addActionListener(e -> txtauthornameActionPerformed(e));
        jButton1.addActionListener(e -> jButton1ActionPerformed(e));
        jButton2.addActionListener(e -> jButton2ActionPerformed(e));
        jButton3.addActionListener(e -> jButton3ActionPerformed(e));
        jButton4.addActionListener(e -> jButton4ActionPerformed(e));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
    }

    private void txtauthornameActionPerformed(java.awt.event.ActionEvent evt) {
        // Event handling for text field
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        String name = txtauthorname.getText().trim();
        String address = txtaddress.getText().trim();
        String phone = txtphone.getText().trim();
        
        // Validate all fields
        String nameError = ValidationUtils.validateName(name);
        String addressError = ValidationUtils.validateRequiredField("Address", address);
        String phoneError = ValidationUtils.validatePhone(phone);
        
        // Check for any validation errors
        if (nameError != null || addressError != null || phoneError != null) {
            StringBuilder errorMessage = new StringBuilder("Please correct the following errors:\n");
            if (nameError != null) errorMessage.append("\n- ").append(nameError);
            if (addressError != null) errorMessage.append("\n- ").append(addressError);
            if (phoneError != null) errorMessage.append("\n- ").append(phoneError);
            
            JOptionPane.showMessageDialog(this, errorMessage.toString(), "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            pst = con.prepareStatement("INSERT INTO author (name, address, phone) VALUES (?, ?, ?)");
            pst.setString(1, name);
            pst.setString(2, address);
            pst.setString(3, phone);
            
            int k = pst.executeUpdate();
            
            if (k == 1) {
                JOptionPane.showMessageDialog(this, "Author Added Successfully");
                clearFields();
                author_load();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to add author");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Author.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Database Error: " + ex.getMessage());
        }
    }

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {
        // UPDATED: Table row click handler - now gets ID from database
        try {
            DefaultTableModel d1 = (DefaultTableModel) jTable1.getModel();
            int selectIndex = jTable1.getSelectedRow();
            
            if (selectIndex != -1) {
                String authorName = d1.getValueAt(selectIndex, 0).toString();
                
                // Get ID from database based on name
                pst = con.prepareStatement("SELECT id FROM author WHERE name = ?");
                pst.setString(1, authorName);
                rs = pst.executeQuery();
                
                if (rs.next()) {
                    selectedId = rs.getInt("id");
                    txtauthorname.setText(authorName);
                    txtaddress.setText(d1.getValueAt(selectIndex, 1).toString());
                    txtphone.setText(d1.getValueAt(selectIndex, 2).toString());
                    jButton1.setEnabled(false);
                    jButton2.setEnabled(true);
                    jButton3.setEnabled(true);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Author.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error selecting record: " + ex.getMessage());
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        // UPDATED: UPDATE button logic - now uses selectedId
        if (selectedId == -1) {
            JOptionPane.showMessageDialog(this, "Please select an author to update");
            return;
        }
        
        String authorname = txtauthorname.getText().trim();
        String address = txtaddress.getText().trim();
        String phone = txtphone.getText().trim();
        
        // Validation
        if (authorname.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Author name is required.");
            txtauthorname.requestFocus();
            return;
        }
        if (address.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Address is required.");
            txtaddress.requestFocus();
            return;
        }
        if (phone.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Phone is required.");
            txtphone.requestFocus();
            return;
        }
        if (!phone.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(this, "Phone must be 10 digits.");
            txtphone.requestFocus();
            return;
        }
        
        try {
            pst = con.prepareStatement("UPDATE author SET name = ?, address = ?, phone = ? WHERE id = ?");
            pst.setString(1, authorname);
            pst.setString(2, address);
            pst.setString(3, phone);
            pst.setInt(4, selectedId);

            int k = pst.executeUpdate();

            if (k == 1) {
                JOptionPane.showMessageDialog(this, "Author Updated");
                txtauthorname.setText("");
                txtaddress.setText("");
                txtphone.setText("");
                txtauthorname.requestFocus();
                selectedId = -1; // Reset selected ID
                Author_load();
                jButton1.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(this, "Author update failed");
            }

        } catch (SQLException ex) {
            Logger.getLogger(Author.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Database Error: " + ex.getMessage());
        }
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        // UPDATED: DELETE button logic - now uses selectedId
        if (selectedId == -1) {
            JOptionPane.showMessageDialog(this, "Please select an author to delete");
            return;
        }
        
        // Confirm delete
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this author?", 
                "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }
    
        try {
            // Check if author has books
            pst = con.prepareStatement("SELECT COUNT(*) FROM book WHERE author = ?");
            pst.setInt(1, selectedId);
            rs = pst.executeQuery();
            if (rs.next() && rs.getInt(1) > 0) {
                JOptionPane.showMessageDialog(this, 
                    "Cannot delete this author because they have books in the system.\n" +
                    "Please remove or reassign all books by this author before deleting.",
                    "Author In Use", JOptionPane.WARNING_MESSAGE);
                return;
            }
            // If no books, proceed to delete
            pst = con.prepareStatement("DELETE FROM author WHERE id = ?");
            pst.setInt(1, selectedId);
            int k = pst.executeUpdate();
            if (k == 1) {
                JOptionPane.showMessageDialog(this, "Author Deleted");
                txtauthorname.setText("");
                txtaddress.setText("");
                txtphone.setText("");
                txtauthorname.requestFocus();
                selectedId = -1;
                Author_load();
                jButton1.setEnabled(true);
                jButton2.setEnabled(false);
                jButton3.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(this, "Author deletion failed");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Author.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Database Error: " + ex.getMessage());
        }
    }
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {
        // CANCEL button logic
        this.setVisible(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Author.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Author.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Author.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Author.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Author().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea txtaddress;
    private javax.swing.JTextField txtauthorname;
    private javax.swing.JTextField txtphone;
    // End of variables declaration

    // Helper class for rounded panel
    static class RoundedPanel extends JPanel {
        private int cornerRadius;
        private Color bgColor;
        public RoundedPanel(int radius, Color bgColor) {
            super();
            this.cornerRadius = radius;
            this.bgColor = bgColor;
            setOpaque(false);
        }
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setColor(bgColor);
            g2.fillRoundRect(0, 0, getWidth(), getHeight(), cornerRadius, cornerRadius);
        }
    }
}